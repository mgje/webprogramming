// Generated by CoffeeScript 1.6.2
(function() {
  var init_f, processingEditor, refreshUI_f, resetInstance_f, runCode_f, setupUI_f;

  init_f = function() {
    var _this = this;

    this.editor = ace.edit("editor");
    this.editor.getSession().setMode("ace/mode/processing");
    this.editor.setTheme("ace/theme/processing");
    this.editor.setShowFoldWidgets(false);
    this.editor.setHighlightActiveLine(false);
    this.editor.renderer.setShowPrintMargin(false);
    this.editor.setValue(typeof Processing_Code !== "undefined" && Processing_Code !== null ? Processing_Code : "rect(50,50,100,100);", -1);
    this.runCode();
    this.setupUI();
    $(window).resize(function() {
      return _this.refreshUI();
    });
    $('#colorPicker').spectrum({
      showInput: false,
      showInitial: true,
      className: "colorPicker",
      chooseText: "Select",
      cancelText: "Cancel",
      show: function() {},
      hide: function() {
        return _this.editor.focus();
      },
      change: function() {
        var color, range, token;

        color = $("#colorPicker").spectrum("get").toRgb();
        range = $("#colorPicker").spectrum.range;
        token = $("#colorPicker").spectrum.token;
        _this.editor.session.replace(range, token.value + "(" + color.r + "," + color.g + "," + color.b + ");");
        return false;
      }
    });
    this.refreshUI();
    return false;
  };

  setupUI_f = function() {
    var _this = this;

    $("#runButton").click(function() {
      _this.runCode();
      return false;
    }).tooltip({
      container: 'body'
    });
    $("#toggleRulers").click(function() {
      $("#horizontalRuler").toggle({
        effect: 'slide',
        direction: 'down'
      });
      return $("#verticalRuler").toggle({
        effect: 'slide',
        direction: 'right'
      });
    }).tooltip({
      placement: 'bottom'
    });
    $(this.editor).on("click", function() {
      var currentValue, line, pixelPosition, position, range, token;

      $("#colorPicker").spectrum("hide");
      position = this.getCursorPosition();
      token = this.session.getTokenAt(position.row, position.column);
      if (token && /\bcolor\b/.test(token.type)) {
        line = this.session.getLine(position.row);
        range = new Range(position.row, token.start, position.row, line.length);
        pixelPosition = this.renderer.$cursorLayer.getPixelPosition(position, true);
        currentValue = /\w*\s?\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/.exec(line);
        if (currentValue) {
          $("#colorPicker").spectrum('set', 'rgb(' + currentValue[1] + ', ' + currentValue[2] + ', ' + currentValue[3] + ')');
        } else {
          $("#colorPicker").spectrum('set', 'black');
        }
        $("#colorPicker").spectrum.token = token;
        $("#colorPicker").spectrum.range = range;
        $("#colorPicker").css({
          top: pixelPosition.top,
          left: pixelPosition.left
        });
        $("#colorPicker").spectrum("show");
        return false;
      }
    });
    return false;
  };

  refreshUI_f = function() {
    var viewportHeight, viewportWidth;

    viewportWidth = $("#interface").width();
    viewportHeight = $("#interface").height() - $("#header").height();
    return false;
  };

  resetInstance_f = function() {
    if (this.processingInstance) {
      this.processingInstance.exit();
      this.processingInstance.background("#cfcfcf");
      this.processingInstance = null;
    }
    return false;
  };

  runCode_f = function() {
    var error, processingCanvas, processingSource;

    this.resetInstance();
    try {
      processingSource = this.editor.getValue();
      processingCanvas = document.getElementById("editorCanvas");
      if (!(/size\(\s*\d+\s*,\s*\d+\s*\)/.test(processingSource))) {
        processingSource = "size(500,445);\n\n" + processingSource;
      }
      this.processingInstance = new Processing("editorCanvas", processingSource);
      if (typeof this.processingInstance.draw === 'function') {
        this.processingInstance.draw();
      }
      $("#editorCanvasBox").css({
        width: this.processingInstance.width,
        height: this.processingInstance.height,
        marginTop: "0px",
        marginLeft: "0px"
      });
      $("#horizontalRuler").css({
        width: this.processingInstance.width,
        top: (-1) * this.processingInstance.height - 25
      });
      $("#verticalRuler").css({
        height: this.processingInstance.height,
        top: (-1) * this.processingInstance.height - 25
      });
    } catch (_error) {
      error = _error;
      alert(error);
    }
    return false;
  };

  processingEditor = {
    editor: null,
    processingInstance: null,
    init: init_f,
    setupUI: setupUI_f,
    refreshUI: refreshUI_f,
    resetInstance: resetInstance_f,
    runCode: runCode_f
  };

  processingEditor.init();

}).call(this);
